// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allTasks = [];
let filteredTasks = [];
let positionCounter = 0;
let taskCounter = 1; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π M001, M002
let usedTaskNumbers = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π
let importedPositions = []; // –ü–æ–∑–∏—Ü–∏–∏, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ Excel
let currentWorkbook = null; // –¢–µ–∫—É—â–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let currentSortField = null;
let currentSortDirection = 'none'; // 'none', 'asc', 'desc'

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
let receivingItems = [];
let filteredReceivingItems = [];
let currentReceivingSortField = null;
let currentReceivingSortDirection = 'none';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadTasks();
    setupEventListeners();
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ localStorage
function saveTasks() {
    try {
        const dataToSave = {
            tasks: allTasks,
            taskCounter: taskCounter,
            usedTaskNumbers: Array.from(usedTaskNumbers)
        };
        localStorage.setItem('warehouse_tasks', JSON.stringify(dataToSave));
        console.log('üíæ –ó–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadTasks() {
    try {
        console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage
        const savedData = localStorage.getItem('warehouse_tasks');
        if (savedData) {
            const data = JSON.parse(savedData);
            allTasks = data.tasks || [];
            taskCounter = data.taskCounter || 1;
            usedTaskNumbers = new Set(data.usedTaskNumbers || []);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ + 1
            allTasks.forEach(task => {
                if (task.taskNumber) {
                    usedTaskNumbers.add(task.taskNumber);
                    const num = parseInt(task.taskNumber.replace('M', ''));
                    if (num >= taskCounter) {
                        taskCounter = num + 1;
                    }
                }
            });
            
            filteredTasks = [...allTasks];
            renderTasksTable();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allTasks.length} –∑–∞–¥–∞–Ω–∏–π –∏–∑ localStorage`);
            return;
        }
        
        // –ï—Å–ª–∏ –≤ localStorage –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ API
        allTasks = [
            {
                taskNumber: 'M001',
                orderNumber: '2024/038',
                title: '–ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–∞—Ä—Ç–∏—è ‚Ññ123',
                description: '–ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ‚Ññ123 –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ "–ê–ª—å—Ñ–∞"',
                priority: 'urgent',
                status: 'in_progress',
                type: 'receive',
                created: new Date('2024-06-07T10:00:00'),
                updated: new Date('2024-06-08T14:30:00'),
                progress: 65,
                positions: [
                    { sku: 'SKU001', name: '–¢–æ–≤–∞—Ä –ê', quantity: 100, completed: 65 },
                    { sku: 'SKU002', name: '–¢–æ–≤–∞—Ä –ë', quantity: 50, completed: 50 }
                ],
                history: [
                    {
                        timestamp: new Date('2024-06-07T10:00:00'),
                        user: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
                        action: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                        comment: '–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏'
                    },
                    {
                        timestamp: new Date('2024-06-08T14:30:00'),
                        user: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
                        action: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞',
                        field: 'priority',
                        oldValue: 'medium',
                        newValue: 'high',
                        comment: '–ü–æ–≤—ã—à–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞'
                    }
                ]
            },
            {
                taskNumber: 'M002',
                orderNumber: '2024/045',
                title: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞ –ê',
                description: '–ü–ª–∞–Ω–æ–≤–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –ê',
                priority: 'normal',
                status: 'development',
                type: 'inventory',
                created: new Date('2024-06-08T09:00:00'),
                updated: null,
                progress: 0,
                positions: [
                    { sku: 'ALL', name: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–∫–ª–∞–¥–∞ –ê', quantity: 1000, completed: 0 }
                ],
                history: [
                    {
                        timestamp: new Date('2024-06-08T09:00:00'),
                        user: '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
                        action: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                        comment: '–ü–ª–∞–Ω–æ–≤–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è'
                    }
                ]
            },
            {
                taskNumber: 'M003',
                orderNumber: '2024/051',
                title: '–û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ456',
                description: '–û—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞ ‚Ññ456',
                priority: 'important',
                status: 'completed',
                type: 'shipment',
                created: new Date('2024-06-06T15:00:00'),
                updated: new Date('2024-06-07T16:00:00'),
                progress: 100,
                positions: [
                    { sku: 'SKU003', name: '–¢–æ–≤–∞—Ä –í', quantity: 25, completed: 25 },
                    { sku: 'SKU004', name: '–¢–æ–≤–∞—Ä –ì', quantity: 30, completed: 30 }
                ],
                history: [
                    {
                        timestamp: new Date('2024-06-06T15:00:00'),
                        user: '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
                        action: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                        comment: '–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏'
                    },
                    {
                        timestamp: new Date('2024-06-07T16:00:00'),
                        user: '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
                        action: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                        field: 'status',
                        oldValue: 'in_progress',
                        newValue: 'completed',
                        comment: '–û—Ç–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ'
                    }
                ]
            }
        ];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π
        allTasks.forEach(task => {
            if (task.taskNumber) {
                usedTaskNumbers.add(task.taskNumber);
                const numberPart = parseInt(task.taskNumber.substring(1));
                if (numberPart >= taskCounter) {
                    taskCounter = numberPart + 1;
                }
            }
        });
        
        filteredTasks = [...allTasks];
        renderTasksTable();
        
        console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allTasks.length);
        console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞:', Array.from(usedTaskNumbers));
        console.log('üî¢ –°–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç—á–∏–∫:', taskCounter);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π', 'error');
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π
function renderTasksTable() {
    const tbody = document.getElementById('tasksTableBody');
    
    if (filteredTasks.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="8" style="text-align: center; padding: 40px; color: #6c757d;">
                    üìã –ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = filteredTasks.map(task => {
        const statusClass = `status ${task.status}`;
        const priorityClass = `priority ${task.priority}`;
        
        return `
            <tr ondblclick="openEditTaskModal('${task.taskNumber}')">
                <td><strong>${task.taskNumber}</strong></td>
                <td><strong>${task.orderNumber}</strong></td>
                <td>
                    <div style="font-weight: 600; margin-bottom: 4px;">${task.title}</div>
                    <div style="font-size: 12px; color: #6c757d;">${getTypeText(task.type)}</div>
                </td>
                <td><span class="${priorityClass}">${getPriorityText(task.priority)}</span></td>
                <td><span class="${statusClass}">${getStatusText(task.status)}</span></td>
                <td><small>${formatDate(task.created)}</small></td>
                <td><small>${task.updated ? formatDate(task.updated) : '‚Äî'}</small></td>
                <td>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${task.progress}%"></div>
                    </div>
                    <small style="font-size: 11px; color: #6c757d;">${task.progress}%</small>
                </td>
            </tr>
        `;
    }).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function toggleFilters() {
    const container = document.getElementById('filtersContainer');
    container.classList.toggle('expanded');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
function filterTasks() {
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const periodFilter = document.getElementById('periodFilter').value;
    const searchQuery = document.getElementById('searchInput').value.toLowerCase();
    
    filteredTasks = allTasks.filter(task => {
        const matchesStatus = !statusFilter || task.status === statusFilter;
        const matchesPriority = !priorityFilter || task.priority === priorityFilter;
        const matchesSearch = !searchQuery || 
            task.title.toLowerCase().includes(searchQuery) ||
            task.description.toLowerCase().includes(searchQuery) ||
            task.taskNumber.toLowerCase().includes(searchQuery) ||
            task.orderNumber.toLowerCase().includes(searchQuery);
        
        let matchesPeriod = true;
        if (periodFilter) {
            const now = new Date();
            const taskDate = new Date(task.created);
            
            switch (periodFilter) {
                case 'today':
                    matchesPeriod = taskDate.toDateString() === now.toDateString();
                    break;
                case 'week':
                    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    matchesPeriod = taskDate >= weekAgo;
                    break;
                case 'month':
                    const monthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                    matchesPeriod = taskDate >= monthAgo;
                    break;
            }
        }
        
        return matchesStatus && matchesPriority && matchesSearch && matchesPeriod;
    });
    
    renderTasksTable();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
function generateTaskNumber() {
    let number;
    do {
        number = `M${String(taskCounter).padStart(3, '0')}`;
        taskCounter++;
    } while (usedTaskNumbers.has(number));
    
    usedTaskNumbers.add(number);
    return number;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
function formatOrderNumber(input) {
    let value = input.value.replace(/\D/g, ''); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    
    if (value.length >= 4) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Å—É—é —á–µ—Ä—Ç—É –ø–æ—Å–ª–µ 4-–π —Ü–∏—Ñ—Ä—ã
        value = value.substring(0, 4) + '/' + value.substring(4, 7);
    }
    
    input.value = value;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function validateOrderNumber(orderNumber) {
    const pattern = /^(\d{4})\/(\d{3})$/;
    const match = orderNumber.match(pattern);
    
    if (!match) {
        return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì/–ß–ß–ß' };
    }
    
    const year = parseInt(match[1]);
    const currentYear = new Date().getFullYear();
    
    if (year < currentYear - 4 || year > currentYear + 1) {
        return { 
            valid: false, 
            error: `–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${currentYear - 4} - ${currentYear + 1}` 
        };
    }
    
    return { valid: true };
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
function openCreateTaskModal() {
    const form = document.getElementById('createTaskForm');
    form.reset();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
    const taskNumber = generateTaskNumber();
    document.getElementById('taskNumber').value = taskNumber;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    const currentYear = new Date().getFullYear();
    document.getElementById('orderNumber').placeholder = `${currentYear}/001`;
    
    document.getElementById('taskPositions').innerHTML = `
        <button type="button" class="btn btn-outline" onclick="addPosition()">
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
        </button>
    `;
    positionCounter = 0;
    
    document.getElementById('createTaskModal').style.display = 'block';
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function openEditTaskModal(taskNumber) {
    const task = allTasks.find(t => t.taskNumber === taskNumber);
    if (!task) return;
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    document.getElementById('editTaskId').value = task.taskNumber;
    document.getElementById('editTaskNumber').value = task.taskNumber;
    document.getElementById('editOrderNumber').value = task.orderNumber;
    document.getElementById('editTaskTitle').value = task.title;
    document.getElementById('editTaskDescription').value = task.description;
    document.getElementById('editTaskPriority').value = task.priority;
    document.getElementById('editTaskStatus').value = task.status;
    document.getElementById('editComment').value = '';
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    loadTaskHistory(task);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    loadTaskProgress(task);
    
    document.getElementById('editTaskModal').style.display = 'block';
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—é
function openTaskReport(taskNumber) {
    const task = allTasks.find(t => t.taskNumber === taskNumber);
    if (!task) return;
    
    const reportDiv = document.getElementById('taskReport');
    
    reportDiv.innerHTML = `
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
            <div>
                <h3>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p><strong>ID:</strong> ${task.id}</p>
                <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${task.title}</p>
                <p><strong>–¢–∏–ø:</strong> ${getTypeText(task.type)}</p>
                <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${getPriorityText(task.priority)}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(task.status)}</p>
            </div>
            <div>
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${formatDateTime(task.created)}</p>
                <p><strong>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</strong> ${formatDateTime(task.updated)}</p>
                <p><strong>–ü—Ä–æ–≥—Ä–µ—Å—Å:</strong> ${task.progress}%</p>
                <p><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç:</strong> ${task.sentToTablet ? '–î–∞ üì±' : '–ù–µ—Ç'}</p>
            </div>
        </div>
        
        <h3>üì¶ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è</h3>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            ${task.positions.map(pos => `
                <div style="display: flex; justify-content: space-between; margin-bottom: 10px; padding: 10px; background: white; border-radius: 4px;">
                    <div>
                        <strong>${pos.name}</strong> (${pos.sku})
                    </div>
                    <div>
                        ${pos.completed}/${pos.quantity} 
                        <span style="color: ${pos.completed === pos.quantity ? '#28a745' : '#ffc107'};">
                            (${Math.round((pos.completed / pos.quantity) * 100)}%)
                        </span>
                    </div>
                </div>
            `).join('')}
        </div>
        
        <h3>üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
        <div style="max-height: 300px; overflow-y: auto;">
            ${task.history.map(item => `
                <div class="history-item">
                    <div class="history-meta">
                        <strong>${item.user}</strong>
                        <span>${formatDateTime(item.timestamp)}</span>
                    </div>
                    <div class="history-change">${item.action}</div>
                    ${item.field ? `<small>–ü–æ–ª–µ: ${item.field} (${item.oldValue} ‚Üí ${item.newValue})</small>` : ''}
                    ${item.comment ? `<div class="history-comment">${item.comment}</div>` : ''}
                </div>
            `).join('')}
        </div>
    `;
    
    document.getElementById('reportModal').style.display = 'block';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–¥–∞–Ω–∏–µ
function addPosition() {
    positionCounter++;
    const positionsDiv = document.getElementById('taskPositions');
    const addButton = positionsDiv.querySelector('button');
    
    const positionDiv = document.createElement('div');
    positionDiv.className = 'position-item';
    positionDiv.innerHTML = `
        <button type="button" class="position-remove" onclick="removePosition(this)">√ó</button>
        <div class="form-row">
            <div class="form-group">
                <label>SKU</label>
                <input type="text" name="position_sku_${positionCounter}" placeholder="–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞" required>
            </div>
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <input type="text" name="position_name_${positionCounter}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" required>
            </div>
        </div>
        <div class="form-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
            <input type="number" name="position_quantity_${positionCounter}" min="1" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" required>
        </div>
    `;
    
    positionsDiv.insertBefore(positionDiv, addButton);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
function removePosition(button) {
    button.parentElement.remove();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function createTask() {
    const form = document.getElementById('createTaskForm');
    const formData = new FormData(form);
    
    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const newTask = {
        id: 'T' + String(Date.now()).slice(-3),
        title: formData.get('taskTitle') || document.getElementById('taskTitle').value,
        description: formData.get('taskDescription') || document.getElementById('taskDescription').value,
        priority: formData.get('taskPriority') || document.getElementById('taskPriority').value,
        status: 'pending',
        type: formData.get('taskType') || document.getElementById('taskType').value,
        created: new Date(),
        updated: new Date(),
        progress: 0,
        sentToTablet: false,
        positions: [],
        history: [{
            timestamp: new Date(),
            user: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            action: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
            comment: '–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        }]
    };
    
    // –°–±–æ—Ä –ø–æ–∑–∏—Ü–∏–π
    const positionItems = document.querySelectorAll('.position-item');
    positionItems.forEach(item => {
        const inputs = item.querySelectorAll('input');
        if (inputs.length >= 3) {
            newTask.positions.push({
                sku: inputs[0].value,
                name: inputs[1].value,
                quantity: parseInt(inputs[2].value) || 0,
                completed: 0
            });
        }
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
    allTasks.push(newTask);
    filteredTasks = [...allTasks];
    renderTasksTable();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveTasks();
    
    closeModal('createTaskModal');
    showNotification('–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ', 'success');
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:', newTask);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è
function saveTask() {
    const taskId = document.getElementById('editTaskId').value;
    const task = allTasks.find(t => t.id === taskId);
    if (!task) return;
    
    const oldTitle = task.title;
    const oldPriority = task.priority;
    const oldStatus = task.status;
    const comment = document.getElementById('editComment').value;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    task.title = document.getElementById('editTaskTitle').value;
    task.description = document.getElementById('editTaskDescription').value;
    task.priority = document.getElementById('editTaskPriority').value;
    task.status = document.getElementById('editTaskStatus').value;
    task.updated = new Date();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const changes = [];
    if (oldTitle !== task.title) changes.push(`–Ω–∞–∑–≤–∞–Ω–∏–µ: "${oldTitle}" ‚Üí "${task.title}"`);
    if (oldPriority !== task.priority) changes.push(`–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${oldPriority} ‚Üí ${task.priority}`);
    if (oldStatus !== task.status) changes.push(`—Å—Ç–∞—Ç—É—Å: ${oldStatus} ‚Üí ${task.status}`);
    
    if (changes.length > 0) {
        task.history.push({
            timestamp: new Date(),
            user: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            action: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
            details: changes.join(', '),
            comment: comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
        });
    }
    
    renderTasksTable();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveTasks();
    
    closeModal('editTaskModal');
    showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    
    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', task);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç
function sendToTablet() {
    const taskId = document.getElementById('editTaskId').value;
    const task = allTasks.find(t => t.id === taskId);
    if (!task) return;
    
    if (task.sentToTablet) {
        showNotification('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç', 'warning');
        return;
    }
    
    task.sentToTablet = true;
    task.updated = new Date();
    task.history.push({
        timestamp: new Date(),
        user: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        action: '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç',
        comment: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    });
    
    renderTasksTable();
    showNotification('–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç üì±', 'success');
    
    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç:', task);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
function deleteTask(taskNumber) {
    const task = allTasks.find(t => t.taskNumber === taskNumber);
    if (!task) return;
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ "${task.title}"?`)) {
        return;
    }
    
    if (task.sentToTablet) {
        // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–µ—Ç–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        task.status = 'deleted';
        task.updated = new Date();
        task.history.push({
            timestamp: new Date(),
            user: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            action: '–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ',
            comment: '–ó–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤'
        });
        
        showNotification('–ó–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤ üóÇÔ∏è', 'warning');
    } else {
        // –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        const index = allTasks.findIndex(t => t.taskNumber === taskNumber);
        allTasks.splice(index, 1);
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
        usedTaskNumbers.delete(task.taskNumber);
        showNotification('–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
    }
    
    filteredTasks = [...allTasks];
    renderTasksTable();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveTasks();
    
    console.log('üóëÔ∏è –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', taskNumber);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function loadTaskHistory(task) {
    const historyDiv = document.getElementById('changeHistory');
    
    historyDiv.innerHTML = task.history.map(item => `
        <div class="history-item">
            <div class="history-meta">
                <strong>${item.user}</strong>
                <span>${formatDateTime(item.timestamp)}</span>
            </div>
            <div class="history-change">${item.action}</div>
            ${item.details ? `<small style="color: #6c757d;">${item.details}</small>` : ''}
            ${item.comment ? `<div class="history-comment">${item.comment}</div>` : ''}
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function loadTaskProgress(task) {
    const progressDiv = document.getElementById('taskProgress');
    
    progressDiv.innerHTML = `
        <div style="margin-bottom: 20px;">
            <h4>üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress}%</h4>
            <div class="progress-bar" style="width: 100%; height: 20px;">
                <div class="progress-fill" style="width: ${task.progress}%"></div>
            </div>
        </div>
        
        <h4>üì¶ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:</h4>
        ${task.positions.map((pos, index) => {
            const progress = Math.round((pos.completed / pos.quantity) * 100);
            return `
                <div style="margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <strong>${index + 1}. ${pos.name} (${pos.sku})</strong>
                        <span>${pos.completed}/${pos.quantity} (${progress}%)</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress}%"></div>
                    </div>
                </div>
            `;
        }).join('')}
    `;
}

// –£—Ç–∏–ª–∏—Ç—ã
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function openTab(evt, tabName) {
    // –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(tab => tab.classList.remove('active'));
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —É –∫–Ω–æ–ø–æ–∫
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(btn => btn.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–±–∞
    document.getElementById(tabName).classList.add('active');
    evt.currentTarget.classList.add('active');
}

function showNotification(message, type = 'info') {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ
    alert(message);
}

function refreshTasks() {
    loadTasks();
    showNotification('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
}

function openArchiveView() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–£–¥–∞–ª–µ–Ω–Ω—ã–µ" –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    const statusFilter = document.getElementById('statusFilter');
    const deletedOption = Array.from(statusFilter.options).find(option => option.value === 'deleted');
    
    if (!deletedOption) {
        statusFilter.innerHTML += '<option value="deleted">–£–¥–∞–ª–µ–Ω–Ω—ã–µ</option>';
    }
    
    statusFilter.value = 'deleted';
    filterTasks();
    showNotification('–ü–æ–∫–∞–∑–∞–Ω –∞—Ä—Ö–∏–≤ –∑–∞–¥–∞–Ω–∏–π', 'info');
}

function showAllTasks() {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.querySelector('.header h1');
    header.innerHTML = 'üìã –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏';
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–º–µ–Ω–µ–Ω–∞
    const tableContainer = document.querySelector('.table-container');
    if (!tableContainer.querySelector('#tasksTable')) {
        tableContainer.innerHTML = `
            <table class="tasks-table" id="tasksTable">
                <thead>
                    <tr>
                        <th class="col-task-id sortable" data-sort="taskNumber" onclick="sortTable('taskNumber')">
                            ‚Ññ –ó–∞–¥–∞–Ω–∏—è <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-order-id sortable" data-sort="orderNumber" onclick="sortTable('orderNumber')">
                            ‚Ññ –ó–∞–∫–∞–∑–∞ <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-title sortable" data-sort="title" onclick="sortTable('title')">
                            –ù–∞–∑–≤–∞–Ω–∏–µ <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-priority sortable" data-sort="priority" onclick="sortTable('priority')">
                            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-status sortable" data-sort="status" onclick="sortTable('status')">
                            –°—Ç–∞—Ç—É—Å <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-created sortable" data-sort="created" onclick="sortTable('created')">
                            –°–æ–∑–¥–∞–Ω <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-updated sortable" data-sort="updated" onclick="sortTable('updated')">
                            –û–±–Ω–æ–≤–ª–µ–Ω <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                        <th class="col-progress sortable" data-sort="progress" onclick="sortTable('progress')">
                            –ü—Ä–æ–≥—Ä–µ—Å—Å <span class="sort-icon">‚ÜïÔ∏è</span>
                        </th>
                    </tr>
                </thead>
                <tbody id="tasksTableBody">
                    <!-- –ó–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </tbody>
            </table>
        `;
    }
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const statusFilter = document.getElementById('statusFilter');
    const priorityFilter = document.getElementById('priorityFilter');
    const searchInput = document.getElementById('searchInput');
    const periodFilter = document.getElementById('periodFilter');
    
    if (statusFilter) statusFilter.value = '';
    if (priorityFilter) priorityFilter.value = '';
    if (searchInput) searchInput.value = '';
    if (periodFilter) periodFilter.value = '';
    
    // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    currentSortField = null;
    currentSortDirection = 'none';
    updateSortIcons();
    
    // –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    filteredTasks = [...allTasks];
    renderTasksTable();
    
    showNotification('–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'info');
}

function exportReport() {
    // –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ - –∑–∞–≥–ª—É—à–∫–∞
    showNotification('–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', 'info');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function formatDateTime(date) {
    return new Date(date).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
function formatDate(date) {
    return new Date(date).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function getStatusText(status) {
    const statuses = {
        'development': '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'loaded': '–ó–∞–≥—Ä—É–∂–µ–Ω',
        'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
        'deleted': '–£–¥–∞–ª–µ–Ω–æ'
    };
    return statuses[status] || status;
}

function getPriorityText(priority) {
    const priorities = {
        'low': '–ù–∏–∑–∫–∏–π',
        'normal': '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π',
        'important': '–í–∞–∂–Ω—ã–π',
        'urgent': '–°—Ä–æ—á–Ω—ã–π'
    };
    return priorities[priority] || priority;
}

function getTypeText(type) {
    const types = {
        'picking': '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
        'shipment': '–û—Ç–≥—Ä—É–∑–∫–∞',
        'writeoff': '–°–ø–∏—Å–∞–Ω–∏–µ',
        // –°—Ç–∞—Ä—ã–µ —Ç–∏–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        'inventory': '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        'receive': '–ü—Ä–∏–µ–º–∫–∞',
        'move': '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ'
    };
    return types[type] || type;
}

// === –§–£–ù–ö–¶–ò–ò –ò–ú–ü–û–†–¢–ê EXCEL ===

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
function openImportModal() {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    importedPositions = [];
    currentWorkbook = null;
    document.getElementById('importPreview').style.display = 'none';
    document.getElementById('createFromImportBtn').style.display = 'none';
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.className = 'upload-area';
    uploadArea.innerHTML = `
        <div class="upload-content">
            <div class="upload-icon">üìÅ</div>
            <h3>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ Excel —Ñ–∞–π–ª —Å—é–¥–∞</h3>
            <p>–∏–ª–∏</p>
            <button class="btn btn-info" onclick="document.getElementById('excelFile').click()">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª
            </button>
            <input type="file" id="excelFile" accept=".xlsx" style="display: none;" onchange="handleFileSelect(event)">
            <div class="file-info">
                <small>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .xlsx</small>
            </div>
        </div>
    `;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    const taskNumber = generateTaskNumber();
    document.getElementById('importTaskNumber').value = taskNumber;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    const currentYear = new Date().getFullYear();
    document.getElementById('importOrderNumber').placeholder = `${currentYear}/001`;
    
    document.getElementById('importModal').style.display = 'block';
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
    setupDragAndDrop();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
function setupDragAndDrop() {
    const uploadArea = document.getElementById('uploadArea');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
        uploadArea.addEventListener(eventName, () => {
            uploadArea.classList.add('dragover');
        }, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, () => {
            uploadArea.classList.remove('dragover');
        }, false);
    });
    
    uploadArea.addEventListener('drop', handleDrop, false);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ drop —Å–æ–±—ã—Ç–∏—è
function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    
    if (files.length > 0) {
        handleFileUpload(files[0]);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
        handleFileUpload(file);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
function handleFileUpload(file) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if (!file.name.toLowerCase().endsWith('.xlsx')) {
        showFileError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .xlsx');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
    if (file.size > 10 * 1024 * 1024) {
        showFileError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
        return;
    }
    
    showFileProcessing(file.name);
    
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            
            parseExcelFile(workbook, file.name);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞:', error);
            showFileError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.');
        }
    };
    
    reader.onerror = function() {
        showFileError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    };
    
    reader.readAsArrayBuffer(file);
}

// –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞
function parseExcelFile(workbook, filename) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        const jsonData = XLSX.utils.sheet_to_json(sheet, { 
            header: 1,
            defval: '',
            blankrows: true 
        });
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–∑ Excel:', jsonData);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏–∑ A2 (—Å—Ç—Ä–æ–∫–∞ 1, –∏–Ω–¥–µ–∫—Å 0)
        let taskTitle = '';
        if (jsonData.length > 1 && jsonData[1] && jsonData[1][0]) {
            taskTitle = String(jsonData[1][0]).trim();
        }
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
        const positions = parsePositionsFromData(jsonData);
        
        if (positions.length === 0) {
            showFileError('–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        importedPositions = positions;
        currentWorkbook = workbook;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        showImportPreview(taskTitle, positions, filename);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel:', error);
        showFileError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö.');
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö Excel
function parsePositionsFromData(data) {
    const positions = [];
    
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Excel...');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å 3-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 2), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for (let i = 2; i < data.length; i++) {
        const row = data[i];
        if (!row || !row[0]) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        const cellA = String(row[0] || '').trim();
        const cellB = String(row[1] || '').trim();
        const cellC = String(row[2] || '').trim();
        
        if (!cellA) continue;
        
        console.log(`üìã –°—Ç—Ä–æ–∫–∞ ${i + 1}: A="${cellA}", B="${cellB}", C="${cellC}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ B
        const quantity = parseFloat(cellB);
        if (!cellB || isNaN(quantity) || quantity <= 0) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}: –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞`);
            continue;
        }
        
        let designation = '';
        let name = '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫ "+" –≤ —Å—Ç–æ–ª–±—Ü–µ C (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ)
        if (cellC === '+' || cellC === '‚úì' || cellC.includes('+')) {
            console.log(`üîß –°—Ç—Ä–æ–∫–∞ ${i + 1}: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ`);
            
            // –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–∞—Ä—Å–∏–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ_–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ"
            const parsed = parseStandardItem(cellA);
            designation = parsed.designation;
            name = parsed.name;
        } else {
            console.log(`üì¶ –°—Ç—Ä–æ–∫–∞ ${i + 1}: –û–±—ã—á–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ`);
            
            // –û–±—ã—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è: "–û–ë–û–ó–ù–ê–ß–ï–ù–ò–ï - –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï" –∏–ª–∏ "–û–ë–û–ó–ù–ê–ß–ï–ù–ò–ï  -  –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï"
            const parsed = parseRegularItem(cellA);
            designation = parsed.designation;
            name = parsed.name;
        }
        
        if (designation && name) {
            positions.push({
                designation: designation,
                name: name,
                quantity: quantity,
                source: `–°—Ç—Ä–æ–∫–∞ ${i + 1}`,
                isStandard: cellC === '+' || cellC === '‚úì' || cellC.includes('+')
            });
            
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: "${name}" (${designation}) - ${quantity} —à—Ç`);
        } else {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É ${i + 1}: "${cellA}"`);
        }
    }
    
    console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${positions.length}`);
    return positions;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ã—á–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π: "–û–ë–û–ó–ù–ê–ß–ï–ù–ò–ï - –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï"
function parseRegularItem(text) {
    // –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å " - " –∏–ª–∏ "  -  "
    const separators = [' - ', '  -  ', '-'];
    
    for (const separator of separators) {
        if (text.includes(separator)) {
            const parts = text.split(separator);
            if (parts.length >= 2) {
                return {
                    designation: parts[0].trim(),
                    name: parts.slice(1).join(separator).trim()
                };
            }
        }
    }
    
    // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const designationPatterns = [
        /^[–ê-–Ø]{1,4}\./,  // –ù–ó.–ö–®.050...
        /^\d{3}-\d{3}/,   // 057-063...
        /^[–ê-–Ø\d]+\.[–ê-–Ø\d]+\./  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–æ—á–∫–∞–º–∏
    ];
    
    for (const pattern of designationPatterns) {
        const match = text.match(pattern);
        if (match) {
            const designation = match[0];
            const name = text.substring(designation.length).trim();
            return { designation, name };
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    return {
        designation: '',
        name: text
    };
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ_–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ"
function parseStandardItem(text) {
    console.log(`üîß –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è: "${text}"`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const words = text.split(/\s+/);
    let nameWords = [];
    let designationStartIndex = 0;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ª–æ–≤–∞–º –∏ –∏—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å —Ü–∏—Ñ—Ä–æ–π
    for (let i = 0; i < words.length; i++) {
        const word = words[i];
        
        // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—É, —ç—Ç–æ –Ω–∞—á–∞–ª–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
        if (/\d/.test(word)) {
            designationStartIndex = i;
            break;
        }
        
        // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
        if (/^[–ê-–Ø–∞-—è—ë–Å]+$/i.test(word)) {
            nameWords.push(word);
        } else {
            // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å–∏–º–≤–æ–ª –Ω–µ –±—É–∫–≤–∞ –∏ –Ω–µ —Ü–∏—Ñ—Ä–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞–ª–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
            designationStartIndex = i;
            break;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (designationStartIndex === 0 && nameWords.length > 0) {
        if (nameWords.length > 3) {
            designationStartIndex = 3;
        } else {
            designationStartIndex = nameWords.length;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (designationStartIndex === 0) {
        designationStartIndex = 1;
    }
    
    const name = words.slice(0, designationStartIndex).join(' ');
    const designation = words.slice(designationStartIndex).join(' ');
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: –ù–∞–∑–≤–∞–Ω–∏–µ="${name}", –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ="${designation}"`);
    
    return {
        name: name || text,
        designation: designation || ''
    };
}



// –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function showImportPreview(taskTitle, positions, filename) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    document.getElementById('importTaskTitle').value = taskTitle;
    
    // –ü–æ–∫–∞–∑ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    document.getElementById('importPreview').style.display = 'block';
    document.getElementById('createFromImportBtn').style.display = 'inline-block';
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    renderImportPositions(positions);
    
    // –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    showFileSuccess(`–§–∞–π–ª "${filename}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${positions.length}`);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
function renderImportPositions(positions) {
    const tbody = document.getElementById('importPositionsBody');
    
    tbody.innerHTML = positions.map((pos, index) => `
        <tr>
            <td>
                ${index + 1}
                ${pos.isStandard ? '<span style="color: #28a745; font-weight: bold;" title="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ">üîß</span>' : ''}
            </td>
            <td title="${pos.designation}">
                <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    ${pos.designation}
                </div>
            </td>
            <td title="${pos.name}">
                <div style="max-width: 250px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    ${pos.name}
                </div>
            </td>
            <td><strong>${pos.quantity}</strong> —à—Ç</td>
            <td>
                <button class="position-remove-btn" onclick="removeImportPosition(${index})">
                    üóëÔ∏è
                </button>
            </td>
        </tr>
    `).join('');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
function removeImportPosition(index) {
    importedPositions.splice(index, 1);
    renderImportPositions(importedPositions);
    
    if (importedPositions.length === 0) {
        document.getElementById('createFromImportBtn').style.display = 'none';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
function createTaskFromImport() {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const taskTitle = document.getElementById('importTaskTitle').value.trim();
    const orderNumber = document.getElementById('importOrderNumber').value.trim();
    const taskNumber = document.getElementById('importTaskNumber').value.trim();
    
    if (!taskTitle) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    if (!orderNumber) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
        return;
    }
    
    const orderValidation = validateOrderNumber(orderNumber);
    if (!orderValidation.valid) {
        alert(orderValidation.error);
        return;
    }
    
    if (importedPositions.length === 0) {
        alert('–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    // –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
    if (!taskNumber) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    const newTask = {
        taskNumber: taskNumber,
        orderNumber: orderNumber,
        title: taskTitle,
        description: `–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ Excel —Ñ–∞–π–ª–∞. –ü–æ–∑–∏—Ü–∏–π: ${importedPositions.length}`,
        priority: document.getElementById('importPriority').value,
        status: 'development',
        type: document.getElementById('importTaskType').value,
        created: new Date(),
        updated: null,
        progress: 0,
        positions: importedPositions.map(pos => ({
            sku: pos.designation,
            name: pos.name,
            quantity: pos.quantity,
            completed: 0
        })),
        history: [{
            timestamp: new Date(),
            user: '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            action: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ Excel',
            comment: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedPositions.length} –ø–æ–∑–∏—Ü–∏–π –∏–∑ Excel —Ñ–∞–π–ª–∞`
        }]
    };
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    allTasks.push(newTask);
    filteredTasks = [...allTasks];
    renderTasksTable();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveTasks();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal('importModal');
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–ó–∞–¥–∞–Ω–∏–µ "${taskTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ Excel —Ñ–∞–π–ª–∞`, 'success');
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ Excel:', newTask);
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∞–π–ª–∞
function showFileProcessing(filename) {
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.className = 'upload-area processing';
    uploadArea.innerHTML = `
        <div class="file-processing">
            <div>‚è≥</div>
            <div>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ "${filename}"...</div>
        </div>
    `;
}

function showFileSuccess(message) {
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.className = 'upload-area';
    uploadArea.innerHTML = `
        <div class="file-success">
            <div>‚úÖ</div>
            <div>${message}</div>
        </div>
    `;
}

function showFileError(message) {
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.className = 'upload-area';
    uploadArea.innerHTML = `
        <div class="file-error">
            <div>‚ùå</div>
            <div>${message}</div>
        </div>
        <div style="margin-top: 15px;">
            <button class="btn btn-info" onclick="openImportModal()">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    `;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–∏—Ö
    window.onclick = function(event) {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    };
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const openModals = document.querySelectorAll('.modal[style*="block"]');
            openModals.forEach(modal => {
                modal.style.display = 'none';
            });
        }
        
        if (event.ctrlKey && event.key === 'n') {
            event.preventDefault();
            openCreateTaskModal();
        }
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if (event.ctrlKey && event.key === '1') {
            event.preventDefault();
            showAllItems();
        }
        
        if (event.ctrlKey && event.key === '2') {
            event.preventDefault();
            showReceiving();
        }
        
        if (event.ctrlKey && event.key === '3') {
            event.preventDefault();
            showArchive();
        }
        
        if (event.ctrlKey && event.key === '0') {
            event.preventDefault();
            showAllTasks();
        }
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ drag & drop
    setupGlobalDragAndDrop();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ drag & drop
function setupGlobalDragAndDrop() {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ drag & drop...');
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è drag & drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        document.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ –Ω–∞–¥ –æ–∫–Ω–æ–º
    let dragCounter = 0;
    
    document.addEventListener('dragenter', function(e) {
        console.log('üìÇ Drag enter event', e.dataTransfer.types);
        dragCounter++;
        if (e.dataTransfer.types.includes('Files')) {
            document.body.classList.add('drag-active');
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å drag-active');
        }
    });
    
    document.addEventListener('dragover', function(e) {
        if (e.dataTransfer.types.includes('Files')) {
            document.body.classList.add('drag-active');
        }
    });
    
    document.addEventListener('dragleave', function(e) {
        console.log('üìÇ Drag leave event');
        dragCounter--;
        if (dragCounter <= 0) {
            dragCounter = 0;
            document.body.classList.remove('drag-active');
            console.log('‚ùå –£–±—Ä–∞–Ω –∫–ª–∞—Å—Å drag-active');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
    document.addEventListener('drop', function(e) {
        console.log('üìÇ Drop event', e.dataTransfer.files);
        dragCounter = 0;
        document.body.classList.remove('drag-active');
        
        // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        const importModal = document.getElementById('importModal');
        if (importModal && importModal.style.display !== 'block') {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                console.log('üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:', file.name);
                
                if (file.name.toLowerCase().endsWith('.xlsx')) {
                    console.log('‚úÖ Excel —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç');
                    openImportModal();
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ–ª–æ –æ—Ç–∫—Ä—ã—Ç—å—Å—è
                    setTimeout(() => {
                        handleFileUpload(file);
                    }, 200);
                } else {
                    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª');
                    alert('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .xlsx');
                }
            }
        } else {
            console.log('üîÑ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ');
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –Ω–µ–º
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFileUpload(files[0]);
            }
        }
    });
    
    console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π drag & drop –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function sortTable(field) {
    console.log(`üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—é: ${field}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if (currentSortField === field) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—è
        switch(currentSortDirection) {
            case 'none':
                currentSortDirection = 'asc';
                break;
            case 'asc':
                currentSortDirection = 'desc';
                break;
            case 'desc':
                currentSortDirection = 'none';
                break;
        }
    } else {
        // –ù–æ–≤–æ–µ –ø–æ–ª–µ - –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
        currentSortField = field;
        currentSortDirection = 'asc';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    updateSortIcons();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if (currentSortDirection === 'none') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        filteredTasks = [...allTasks];
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filterTasks();
    } else {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
        filteredTasks.sort((a, b) => {
            let valueA = getSortValue(a, field);
            let valueB = getSortValue(b, field);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ null/undefined –∑–Ω–∞—á–µ–Ω–∏–π
            if (valueA === null || valueA === undefined) valueA = '';
            if (valueB === null || valueB === undefined) valueB = '';
            
            let comparison = 0;
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
            switch(field) {
                case 'taskNumber':
                case 'orderNumber':
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫
                    comparison = valueA.toString().localeCompare(valueB.toString(), 'ru', { numeric: true });
                    break;
                    
                case 'created':
                case 'updated':
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç
                    const dateA = new Date(valueA);
                    const dateB = new Date(valueB);
                    comparison = dateA - dateB;
                    break;
                    
                case 'progress':
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–∏—Å–µ–ª
                    comparison = valueA - valueB;
                    break;
                    
                case 'priority':
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
                    const priorityOrder = { 'low': 1, 'normal': 2, 'important': 3, 'urgent': 4 };
                    comparison = (priorityOrder[valueA] || 0) - (priorityOrder[valueB] || 0);
                    break;
                    
                case 'status':
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    const statusOrder = { 
                        'development': 1, 
                        'sent': 2, 
                        'loaded': 3, 
                        'in_progress': 4, 
                        'paused': 5, 
                        'completed': 6 
                    };
                    comparison = (statusOrder[valueA] || 0) - (statusOrder[valueB] || 0);
                    break;
                    
                default:
                    // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                    comparison = valueA.toString().localeCompare(valueB.toString(), 'ru');
                    break;
            }
            
            return currentSortDirection === 'asc' ? comparison : -comparison;
        });
    }
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    renderTasksTable();
    
    console.log(`‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ${currentSortDirection} –ø–æ ${field} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
function getSortValue(task, field) {
    switch(field) {
        case 'taskNumber': return task.taskNumber;
        case 'orderNumber': return task.orderNumber;
        case 'title': return task.title;
        case 'priority': return task.priority;
        case 'status': return task.status;
        case 'created': return task.created;
        case 'updated': return task.updated;
        case 'progress': return task.progress;
        default: return '';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
function updateSortIcons() {
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    document.querySelectorAll('.tasks-table th.sortable').forEach(th => {
        th.classList.remove('sort-asc', 'sort-desc');
        const icon = th.querySelector('.sort-icon');
        if (icon) {
            icon.innerHTML = '‚ÜïÔ∏è';
        }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if (currentSortField && currentSortDirection !== 'none') {
        const currentHeader = document.querySelector(`[data-sort="${currentSortField}"]`);
        if (currentHeader) {
            currentHeader.classList.add(`sort-${currentSortDirection}`);
            const icon = currentHeader.querySelector('.sort-icon');
            if (icon) {
                if (currentSortDirection === 'asc') {
                    icon.innerHTML = 'üî∫';
                } else if (currentSortDirection === 'desc') {
                    icon.innerHTML = 'üîª';
                }
            }
        }
    }
}

// === –§–£–ù–ö–¶–ò–ò –ü–†–ò–ï–ú–ö–ò ===

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏
function loadReceivingItems() {
    try {
        const savedData = localStorage.getItem('warehouse_receiving');
        if (savedData) {
            const data = JSON.parse(savedData);
            receivingItems = data || [];
        } else {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–∫–∏
            receivingItems = [
                {
                    id: 'R001',
                    date: '2024-06-08',
                    orderNumber: '2024/038',
                    designation: '–ù–ó.–ö–®.050.16.01.01–ú.100',
                    name: '–°–µ–¥–ª–æ –∫–ª–∞–ø–∞–Ω–∞',
                    quantity: 50,
                    routeCard: '–ú–ö-2024-001',
                    npStatus: 'approved'
                },
                {
                    id: 'R002',
                    date: '2024-06-09',
                    orderNumber: '2024/045',
                    designation: '–ù–ó.–ö–®.050.16.02.01.010',
                    name: '–ü—Ä—É–∂–∏–Ω–∞ —Ç–∞—Ä–µ–ª—å—á–∞—Ç–∞—è',
                    quantity: 25,
                    routeCard: '–ú–ö-2024-002',
                    npStatus: 'pending'
                }
            ];
            saveReceivingItems();
        }
        
        filteredReceivingItems = [...receivingItems];
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${receivingItems.length} –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏–µ–º–∫–∏`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏ –≤ localStorage
function saveReceivingItems() {
    try {
        localStorage.setItem('warehouse_receiving', JSON.stringify(receivingItems));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏:', error);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–µ–º–∫–∏
function openReceivingModal() {
    loadReceivingItems();
    renderReceivingTable();
    document.getElementById('receivingModal').style.display = 'block';
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–µ–º–∫–∏
function renderReceivingTable() {
    const tbody = document.getElementById('receivingTableBody');
    
    if (filteredReceivingItems.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 40px; color: #6c757d;">
                    üì¶ –ü–æ–∑–∏—Ü–∏–π –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = filteredReceivingItems.map(item => {
        const statusClass = `status ${item.npStatus}`;
        const statusText = getReceivingStatusText(item.npStatus);
        
        return `
            <tr ondblclick="editReceivingItem('${item.id}')">
                <td>${formatDate(new Date(item.date))}</td>
                <td><strong>${item.orderNumber}</strong></td>
                <td><code>${item.designation}</code></td>
                <td>${item.name}</td>
                <td><strong>${item.quantity}</strong></td>
                <td>${item.routeCard || '‚Äî'}</td>
                <td><span class="${statusClass}">${statusText}</span></td>
            </tr>
        `;
    }).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ù–ü
function getReceivingStatusText(status) {
    const statuses = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'approved': '–û–¥–æ–±—Ä–µ–Ω–æ',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    };
    return statuses[status] || status;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏
function openAddReceivingItemModal() {
    const form = document.getElementById('addReceivingItemForm');
    form.reset();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    document.getElementById('receivingDate').value = new Date().toISOString().split('T')[0];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    const currentYear = new Date().getFullYear();
    document.getElementById('receivingOrderNumber').placeholder = `${currentYear}/001`;
    
    document.getElementById('addReceivingItemModal').style.display = 'block';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏
function addReceivingItem() {
    const date = document.getElementById('receivingDate').value;
    const orderNumber = document.getElementById('receivingOrderNumber').value;
    const designation = document.getElementById('receivingDesignation').value;
    const name = document.getElementById('receivingName').value;
    const quantity = parseInt(document.getElementById('receivingQuantity').value);
    const routeCard = document.getElementById('receivingRouteCard').value;
    const npStatus = document.getElementById('receivingNpStatus').value;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!date || !orderNumber || !designation || !name || !quantity) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    const orderValidation = validateOrderNumber(orderNumber);
    if (!orderValidation.valid) {
        alert(orderValidation.error);
        return;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const newItem = {
        id: 'R' + String(Date.now()).slice(-6),
        date: date,
        orderNumber: orderNumber,
        designation: designation,
        name: name,
        quantity: quantity,
        routeCard: routeCard || null,
        npStatus: npStatus
    };
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
    receivingItems.push(newItem);
    filteredReceivingItems = [...receivingItems];
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    saveReceivingItems();
    renderReceivingTable();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal('addReceivingItemModal');
    
    showNotification('–ü–æ–∑–∏—Ü–∏—è –ø—Ä–∏–µ–º–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–µ–º–∫–∏:', newItem);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏–µ–º–∫–∏
function filterReceivingItems() {
    const dateFilter = document.getElementById('receivingDateFilter').value;
    const orderFilter = document.getElementById('receivingOrderFilter').value.toLowerCase();
    const statusFilter = document.getElementById('receivingStatusFilter').value;
    const searchFilter = document.getElementById('receivingSearchFilter').value.toLowerCase();
    
    filteredReceivingItems = receivingItems.filter(item => {
        const matchesDate = !dateFilter || item.date === dateFilter;
        const matchesOrder = !orderFilter || item.orderNumber.toLowerCase().includes(orderFilter);
        const matchesStatus = !statusFilter || item.npStatus === statusFilter;
        const matchesSearch = !searchFilter || 
            item.designation.toLowerCase().includes(searchFilter) ||
            item.name.toLowerCase().includes(searchFilter);
        
        return matchesDate && matchesOrder && matchesStatus && matchesSearch;
    });
    
    renderReceivingTable();
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–µ–º–∫–∏
function sortReceivingTable(field) {
    console.log(`üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–µ–º–∫–∏ –ø–æ –ø–æ–ª—é: ${field}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if (currentReceivingSortField === field) {
        switch(currentReceivingSortDirection) {
            case 'none':
                currentReceivingSortDirection = 'asc';
                break;
            case 'asc':
                currentReceivingSortDirection = 'desc';
                break;
            case 'desc':
                currentReceivingSortDirection = 'none';
                break;
        }
    } else {
        currentReceivingSortField = field;
        currentReceivingSortDirection = 'asc';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    updateReceivingSortIcons();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if (currentReceivingSortDirection === 'none') {
        filteredReceivingItems = [...receivingItems];
        filterReceivingItems();
    } else {
        filteredReceivingItems.sort((a, b) => {
            let valueA = getReceivingSortValue(a, field);
            let valueB = getReceivingSortValue(b, field);
            
            if (valueA === null || valueA === undefined) valueA = '';
            if (valueB === null || valueB === undefined) valueB = '';
            
            let comparison = 0;
            
            switch(field) {
                case 'date':
                    comparison = new Date(valueA) - new Date(valueB);
                    break;
                case 'quantity':
                    comparison = valueA - valueB;
                    break;
                case 'npStatus':
                    const statusOrder = { 'pending': 1, 'approved': 2, 'rejected': 3 };
                    comparison = (statusOrder[valueA] || 0) - (statusOrder[valueB] || 0);
                    break;
                default:
                    comparison = valueA.toString().localeCompare(valueB.toString(), 'ru');
                    break;
            }
            
            return currentReceivingSortDirection === 'asc' ? comparison : -comparison;
        });
    }
    
    renderReceivingTable();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–µ–º–∫–∏
function getReceivingSortValue(item, field) {
    switch(field) {
        case 'date': return item.date;
        case 'orderNumber': return item.orderNumber;
        case 'designation': return item.designation;
        case 'name': return item.name;
        case 'quantity': return item.quantity;
        case 'routeCard': return item.routeCard;
        case 'npStatus': return item.npStatus;
        default: return '';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
function updateReceivingSortIcons() {
    document.querySelectorAll('#receivingTable th.sortable').forEach(th => {
        th.classList.remove('sort-asc', 'sort-desc');
        const icon = th.querySelector('.sort-icon');
        if (icon) {
            icon.innerHTML = '‚ÜïÔ∏è';
        }
    });
    
    if (currentReceivingSortField && currentReceivingSortDirection !== 'none') {
        const currentHeader = document.querySelector(`#receivingTable [data-sort="${currentReceivingSortField}"]`);
        if (currentHeader) {
            currentHeader.classList.add(`sort-${currentReceivingSortDirection}`);
            const icon = currentHeader.querySelector('.sort-icon');
            if (icon) {
                if (currentReceivingSortDirection === 'asc') {
                    icon.innerHTML = 'üî∫';
                } else if (currentReceivingSortDirection === 'desc') {
                    icon.innerHTML = 'üîª';
                }
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–µ–º–∫–µ
function exportReceivingReport() {
    showNotification('–û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–µ–º–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', 'info');
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
function showAllItems() {
    console.log('üì¶ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏"');
    
    // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.querySelector('.header h1');
    header.innerHTML = 'üì¶ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏';
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
    const tableContainer = document.querySelector('.table-container');
    tableContainer.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #5a9fd4;">
            <div style="font-size: 3rem; margin-bottom: 20px;">üì¶</div>
            <h2 style="color: #5a9fd4; margin-bottom: 10px;">–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏</h2>
            <p style="color: #7a8fa3;">–ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ</p>
            <div style="margin-top: 30px;">
                <button class="btn btn-primary" onclick="showAllTasks()">
                    üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º
                </button>
            </div>
        </div>
    `;
    
    // showNotification('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏"', 'success'); // —É–±—Ä–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}

function showReceiving() {
    console.log('üì• –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "–ü—Ä–∏–µ–º–∫–∞"');
    
    // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.querySelector('.header h1');
    header.innerHTML = 'üì• –ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤';
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–µ–º–∫—É
    const tableContainer = document.querySelector('.table-container');
    tableContainer.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #d4a574;">
            <div style="font-size: 3rem; margin-bottom: 20px;">üì•</div>
            <h2 style="color: #d4a574; margin-bottom: 10px;">–ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</h2>
            <p style="color: #7a8fa3;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∞—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏</p>
            <div style="margin-top: 30px;">
                <button class="btn btn-warning" onclick="openReceivingModal()">
                    üì¶ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–µ–º–∫—É
                </button>
                <button class="btn btn-primary" onclick="showAllTasks()" style="margin-left: 10px;">
                    üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º
                </button>
            </div>
        </div>
    `;
    
    // showNotification('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "–ü—Ä–∏–µ–º–∫–∞"', 'success'); // —É–±—Ä–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}

function showArchive() {
    console.log('üóÇÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "–ê—Ä—Ö–∏–≤"');
    
    // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.querySelector('.header h1');
    header.innerHTML = 'üóÇÔ∏è –ê—Ä—Ö–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π';
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
    const tableContainer = document.querySelector('.table-container');
    tableContainer.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #7a8fa3;">
            <div style="font-size: 3rem; margin-bottom: 20px;">üóÇÔ∏è</div>
            <h2 style="color: #7a8fa3; margin-bottom: 10px;">–ê—Ä—Ö–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
            <p style="color: #7a8fa3;">–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤</p>
            <div style="margin-top: 30px;">
                <button class="btn btn-secondary" onclick="openArchiveView()">
                    üìã –û—Ç–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤
                </button>
                <button class="btn btn-primary" onclick="showAllTasks()" style="margin-left: 10px;">
                    üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º
                </button>
            </div>
        </div>
    `;
    
    // showNotification('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "–ê—Ä—Ö–∏–≤"', 'success'); // —É–±—Ä–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}