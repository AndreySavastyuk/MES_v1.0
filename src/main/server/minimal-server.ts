import express from 'express';

const app = express();
const PORT = 3001;

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π middleware
app.use(express.json());

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π endpoint
app.get('/api/health', (req: any, res: any) => {
  console.log('üè• Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    server: 'minimal'
  });
});

app.get('/api/test', (req: any, res: any) => {
  console.log('üß™ Test endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  res.json({ 
    message: '–¢–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç', 
    timestamp: new Date().toISOString()
  });
});

let server: any = null;

export async function startMinimalServer(): Promise<void> {
  console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  return new Promise((resolve, reject) => {
    try {
      server = app.listen(PORT, '127.0.0.1', () => {
        console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:${PORT}`);
        console.log(`üè• Health check: http://127.0.0.1:${PORT}/api/health`);
        console.log(`üß™ Test endpoint: http://127.0.0.1:${PORT}/api/test`);
        resolve();
      });

      server.on('error', (error: any) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
        if (error.code === 'EADDRINUSE') {
          reject(new Error(`–ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`));
        } else {
          reject(error);
        }
      });

      server.on('listening', () => {
        console.log('üëÇ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        if (server && server.listening) {
          console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π');
        } else {
          console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
        }
      }, 1000);

    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      reject(error);
    }
  });
}

export async function stopMinimalServer(): Promise<void> {
  return new Promise((resolve) => {
    if (server) {
      server.close(() => {
        console.log('üõë –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve();
      });
    } else {
      resolve();
    }
  });
} 