import express from 'express';
import cors from 'cors';
import { getTasks, getProducts, getInventoryLog, getDatabaseStatistics } from '../database/index-json';
import reportsRouter from './routes/reports-simple';

const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì° ${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –û—Å–Ω–æ–≤–Ω—ã–µ API routes
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    database: 'json-storage',
    version: '1.0.0'
  });
});

// API –¥–ª—è –∑–∞–¥–∞—á
app.get('/api/tasks', async (req, res) => {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    const tasks = await getTasks();
    res.json({ tasks, total: tasks.length });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á' });
  }
});

// API –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/products', async (req, res) => {
  try {
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');
    const products = await getProducts();
    res.json({ products, total: products.length });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// API –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
app.get('/api/inventory-log', async (req, res) => {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
    const log = await getInventoryLog();
    res.json({ log, total: log.length });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞' });
  }
});

// API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/statistics', (req, res) => {
  try {
    console.log('üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    const stats = getDatabaseStatistics();
    res.json(stats);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
app.use(reportsRouter);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  console.log(`‚ùì 404 - –ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å: ${req.path}`);
  res.status(404).json({ 
    error: '–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 
    path: req.path,
    availableEndpoints: [
      '/api/health',
      '/api/tasks', 
      '/api/products',
      '/api/inventory-log',
      '/api/statistics',
      '/api/reports/test'
    ]
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error: any, req: any, res: any, next: any) => {
  console.error('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: error.message,
    timestamp: new Date().toISOString()
  });
});

let server: any = null;

export async function startServer(): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      server = app.listen(PORT, () => {
        console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
        console.log(`üè• Health check: http://localhost:${PORT}/api/health`);
        resolve();
      });

      server.on('error', (error: any) => {
        if (error.code === 'EADDRINUSE') {
          console.warn(`‚ö†Ô∏è –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`);
          // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç
          reject(new Error(`–ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`));
        } else {
          reject(error);
        }
      });
    } catch (error) {
      reject(error);
    }
  });
}

export async function stopServer(): Promise<void> {
  return new Promise((resolve) => {
    if (server) {
      server.close(() => {
        console.log('üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve();
      });
    } else {
      resolve();
    }
  });
}

export function getServerStatus(): any {
  return {
    running: server !== null,
    port: PORT,
    url: `http://localhost:${PORT}`,
    endpoints: {
      health: '/api/health',
      tasks: '/api/tasks',
      products: '/api/products',
      inventoryLog: '/api/inventory-log',
      statistics: '/api/statistics',
      reports: '/api/reports/test'
    }
  };
} 