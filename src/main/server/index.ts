import express from 'express';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import cors from 'cors';
import { allSQL, getSQL, runSQL } from '../database';

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
import tasksRouter from './routes/tasks';
import devicesRouter from './routes/devices';
import syncRouter, { initializeSyncService } from './routes/sync';

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// API Routes
app.use('/api/tasks', tasksRouter);
app.use('/api/devices', devicesRouter);
app.use('/api/sync', syncRouter);

app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Products API
app.get('/api/products', async (req, res) => {
  try {
    const products = await allSQL(`
      SELECT p.*, c.name as category_name, s.name as supplier_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id 
      LEFT JOIN suppliers s ON p.supplier_id = s.id
    `);
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await getSQL('SELECT * FROM products WHERE id = ?', [req.params.id]);
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(product);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
  }
});

app.post('/api/products', async (req, res) => {
  try {
    const { sku, name, description, price, cost, category_id, supplier_id } = req.body;
    const result = await runSQL(`
      INSERT INTO products (sku, name, description, price, cost, category_id, supplier_id) 
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [sku, name, description, price, cost, category_id, supplier_id]);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    io.emit('product_created', { id: (result as any).lastInsertRowid, ...req.body });
    
    res.status(201).json({ id: (result as any).lastInsertRowid, message: '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
  }
});

app.put('/api/products/:id', async (req, res) => {
  try {
    const { sku, name, description, price, cost, category_id, supplier_id } = req.body;
    await runSQL(`
      UPDATE products 
      SET sku = ?, name = ?, description = ?, price = ?, cost = ?, 
          category_id = ?, supplier_id = ?, updated_at = CURRENT_TIMESTAMP 
      WHERE id = ?
    `, [sku, name, description, price, cost, category_id, supplier_id, req.params.id]);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    io.emit('product_updated', { id: req.params.id, ...req.body });
    
    res.json({ message: '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
  }
});

// Inventory API
app.get('/api/inventory', async (req, res) => {
  try {
    const inventory = await allSQL(`
      SELECT i.*, p.sku, p.name as product_name, l.code as location_code, l.name as location_name
      FROM inventory i
      JOIN products p ON i.product_id = p.id
      LEFT JOIN locations l ON i.location_id = l.id
    `);
    res.json(inventory);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤' });
  }
});

app.post('/api/inventory/movement', async (req, res) => {
  try {
    const { product_id, location_id, movement_type, quantity, reference_type, reference_id, notes } = req.body;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    await runSQL(`
      INSERT INTO stock_movements 
      (product_id, location_id, movement_type, quantity, reference_type, reference_id, notes) 
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [product_id, location_id, movement_type, quantity, reference_type, reference_id, notes]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    const quantityChange = movement_type === 'in' ? quantity : -quantity;
    await runSQL(`
      INSERT OR REPLACE INTO inventory (product_id, location_id, quantity, last_updated)
      VALUES (?, ?, 
        COALESCE((SELECT quantity FROM inventory WHERE product_id = ? AND location_id = ?), 0) + ?,
        CURRENT_TIMESTAMP)
    `, [product_id, location_id, product_id, location_id, quantityChange]);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    io.emit('inventory_updated', { product_id, location_id, movement_type, quantity });
    
    res.status(201).json({ message: '–î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–≤–∏–∂–µ–Ω–∏—è' });
  }
});

// Categories API
app.get('/api/categories', async (req, res) => {
  try {
    const categories = await allSQL('SELECT * FROM categories ORDER BY name');
    res.json(categories);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
});

// Locations API
app.get('/api/locations', async (req, res) => {
  try {
    const locations = await allSQL('SELECT * FROM locations WHERE is_active = 1 ORDER BY code');
    res.json(locations);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π' });
  }
});

// WebSocket connections
io.on('connection', (socket) => {
  console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);
  
  socket.on('disconnect', () => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id);
  });
  
  socket.on('sync_request', (deviceId) => {
    console.log('–ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', deviceId);
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω—à–µ—Ç–∞–º–∏
    handleSyncRequest(socket, deviceId);
  });
});

async function handleSyncRequest(socket: any, deviceId: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const changes = await allSQL(`
      SELECT * FROM sync_log 
      WHERE device_id != ? AND synced = 0 
      ORDER BY created_at
    `, [deviceId]);
    
    socket.emit('sync_data', changes);
  } catch (error) {
    socket.emit('sync_error', { error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' });
  }
}

export async function startServer(): Promise<void> {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ WiFi —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  initializeSyncService();
  
  return new Promise((resolve) => {
    server.listen(PORT, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`WiFi Sync Service –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 8080 (HTTP) –∏ 8081 (WebSocket)`);
      resolve();
    });
  });
}

export { io };

export async function setupServer(): Promise<void> {
  console.log('üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
  // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Express —Å–µ—Ä–≤–µ—Ä
} 