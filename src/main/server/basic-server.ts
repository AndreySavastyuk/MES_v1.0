import * as http from 'http';
import * as url from 'url';

const PORT = 3001;
let server: http.Server | null = null;

export async function startBasicServer(): Promise<void> {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
  console.log(`üìç –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—Ç—É ${PORT} –Ω–∞ 127.0.0.1`);
  
  return new Promise((resolve, reject) => {
    try {
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
      server = http.createServer((req, res) => {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.setHeader('Content-Type', 'application/json');

        const parsedUrl = url.parse(req.url || '', true);
        const path = parsedUrl.pathname;

        console.log(`üì° ${new Date().toISOString()} - ${req.method} ${path}`);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if (path === '/api/health' && req.method === 'GET') {
          console.log('üè• Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
          const response = {
            status: 'healthy',
            timestamp: new Date().toISOString(),
            server: 'basic-http',
            port: PORT,
            method: req.method,
            path: path
          };
          res.writeHead(200);
          res.end(JSON.stringify(response, null, 2));
          
        } else if (path === '/api/test' && req.method === 'GET') {
          console.log('üß™ Test endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
          const response = {
            message: '–ë–∞–∑–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            timestamp: new Date().toISOString(),
            server: 'basic-http'
          };
          res.writeHead(200);
          res.end(JSON.stringify(response, null, 2));
          
        } else if (path === '/api/status' && req.method === 'GET') {
          console.log('üìä Status endpoint –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
          const response = {
            server: 'running',
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            platform: process.platform,
            nodeVersion: process.version
          };
          res.writeHead(200);
          res.end(JSON.stringify(response, null, 2));
          
        } else {
          // 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
          console.log(`‚ùì 404 - –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path}`);
          const response = {
            error: '–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            path: path,
            method: req.method,
            availableEndpoints: [
              '/api/health',
              '/api/test',
              '/api/status'
            ]
          };
          res.writeHead(404);
          res.end(JSON.stringify(response, null, 2));
        }
      });

      console.log('üéØ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—Ç—É...');
      server.listen(PORT, '127.0.0.1', () => {
        console.log(`‚úÖ –ë–∞–∑–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:${PORT}`);
        console.log(`üè• Health check: http://127.0.0.1:${PORT}/api/health`);
        console.log(`üß™ Test endpoint: http://127.0.0.1:${PORT}/api/test`);
        console.log(`üìä Status endpoint: http://127.0.0.1:${PORT}/api/status`);
        console.log('üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã!');
        resolve();
      });

      server.on('error', (error: any) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          message: error.message,
          port: PORT,
          address: '127.0.0.1'
        });
        reject(error);
      });

      server.on('listening', () => {
        console.log('üëÇ HTTP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        const address = server?.address();
        console.log('üìç –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:', address);
      });

    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', error);
      reject(error);
    }
  });
}

export async function stopBasicServer(): Promise<void> {
  return new Promise((resolve) => {
    if (server) {
      server.close(() => {
        console.log('üõë –ë–∞–∑–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        server = null;
        resolve();
      });
    } else {
      resolve();
    }
  });
}

export function getBasicServerStatus(): any {
  return {
    running: server !== null,
    port: PORT,
    url: `http://127.0.0.1:${PORT}`,
    endpoints: [
      '/api/health',
      '/api/test', 
      '/api/status'
    ]
  };
} 