import { app, BrowserWindow, ipcMain } from 'electron';
import * as path from 'path';
import { initDatabase, closeDatabase } from './database/index-json';
import { setupSync } from './sync';
import { startBasicServer as startServer, stopBasicServer as stopServer } from './server/basic-server';

class WarehouseApp {
  private mainWindow: BrowserWindow | null = null;
  private isDev = process.env.NODE_ENV === 'development';

  constructor() {
    this.init();
  }

  private async init() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Warehouse Desktop...');
    await app.whenReady();
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await initDatabase();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      setupSync();
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      
      // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ API
      console.log('üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        await startServer();
        console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      } catch (serverError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞:', serverError);
        console.warn('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
      console.log('üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...');
      this.createMainWindow();
      
      this.setupEventHandlers();
      console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      this.showErrorDialog(error);
    }
  }
  
  private showErrorDialog(error: any) {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
    const errorWindow = new BrowserWindow({
      width: 600,
      height: 400,
      webPreferences: { nodeIntegration: true, contextIsolation: false }
    });
    
    const errorHTML = `
      <!DOCTYPE html>
      <html>
        <head><title>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞</title></head>
        <body style="font-family: Arial; padding: 20px; background: #f44336; color: white;">
          <h1>üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
          <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${error.message || error}</p>
          <p><strong>–î–µ—Ç–∞–ª–∏:</strong></p>
          <pre style="background: rgba(0,0,0,0.2); padding: 10px; border-radius: 4px;">${error.stack || '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ'}</pre>
          <p><em>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</em></p>
        </body>
      </html>
    `;
    
    errorWindow.loadURL('data:text/html;charset=utf-8,' + encodeURIComponent(errorHTML));
  }

  private createMainWindow() {
    this.mainWindow = new BrowserWindow({
      width: 1200,
      height: 800,
      minWidth: 800,
      minHeight: 600,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: path.join(__dirname, '../preload/preload.js'),
      },
      show: false,
      titleBarStyle: 'default',
      icon: path.join(__dirname, '../../assets/icon.png'),
    });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.mainWindow.maximize();

    // –ó–∞–≥—Ä—É–∑–∫–∞ renderer –ø—Ä–æ—Ü–µ—Å—Å–∞
    if (this.isDev) {
      this.mainWindow.loadURL('http://localhost:3000');
      this.mainWindow.webContents.openDevTools();
    } else {
      this.mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'));
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ
    this.mainWindow.once('ready-to-show', () => {
      this.mainWindow?.show();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    this.mainWindow.on('closed', () => {
      this.mainWindow = null;
    });
  }

  private setupEventHandlers() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.on('window-all-closed', async () => {
      if (process.platform !== 'darwin') {
        console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        try {
          await stopServer();
          await closeDatabase();
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
        }
        app.quit();
      }
    });

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ macOS
    app.on('activate', () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        this.createMainWindow();
      }
    });

    // IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    ipcMain.handle('app-version', () => {
      return app.getVersion();
    });

    ipcMain.handle('app-quit', () => {
      app.quit();
    });

    ipcMain.handle('window-minimize', () => {
      this.mainWindow?.minimize();
    });

    ipcMain.handle('window-maximize', () => {
      if (this.mainWindow?.isMaximized()) {
        this.mainWindow.unmaximize();
      } else {
        this.mainWindow?.maximize();
      }
    });

    ipcMain.handle('window-close', () => {
      this.mainWindow?.close();
    });
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
new WarehouseApp(); 