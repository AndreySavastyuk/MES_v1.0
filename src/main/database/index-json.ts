import JSONStorage from './json-storage';

let jsonDb: JSONStorage | null = null;

export async function initDatabase(): Promise<void> {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    jsonDb = new JSONStorage();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    await initializeTestData();
    
    console.log('‚úÖ JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

async function initializeTestData(): Promise<void> {
  if (!jsonDb) return;

  const stats = jsonDb.getStatistics();
  
  // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (stats.totalTasks === 0) {
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await jsonDb.insertTask({
      title: '–ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–∞—Ä—Ç–∏—è ‚Ññ123',
      description: '–ü—Ä–∏–Ω—è—Ç—å –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π',
      status: 'completed',
      priority: 'high',
      assigned_to: 'device_001',
      completed_at: new Date().toISOString()
    });

    await jsonDb.insertTask({
      title: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞ –ê',
      description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é —Å–∫–ª–∞–¥–∞ –ê',
      status: 'in_progress',
      priority: 'medium',
      assigned_to: 'device_002'
    });

    await jsonDb.insertTask({
      title: '–û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ456',
      description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏ –æ—Ç–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞',
      status: 'pending',
      priority: 'high',
      assigned_to: null
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    await jsonDb.insertProduct({
      name: '–¢–æ–≤–∞—Ä —Ç–µ—Å—Ç–æ–≤—ã–π –ê',
      sku: 'TEST-001',
      category: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      price: 100.50,
      quantity: 50,
      location: '–°–∫–ª–∞–¥ –ê, —Å—Ç–µ–ª–ª–∞–∂ 1'
    });

    await jsonDb.insertProduct({
      name: '–¢–æ–≤–∞—Ä —Ç–µ—Å—Ç–æ–≤—ã–π –ë',
      sku: 'TEST-002',
      category: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      price: 75.25,
      quantity: 30,
      location: '–°–∫–ª–∞–¥ –ê, —Å—Ç–µ–ª–ª–∞–∂ 2'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π
    await jsonDb.insertInventoryLog({
      product_id: '1',
      action: 'receipt',
      quantity_change: 50,
      previous_quantity: 0,
      new_quantity: 50,
      user_id: 'user_001',
      notes: '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞'
    });

    await jsonDb.insertInventoryLog({
      product_id: '2',
      action: 'receipt',
      quantity_change: 30,
      previous_quantity: 0,
      new_quantity: 30,
      user_id: 'user_001',
      notes: '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞'
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
  }
}

// –≠–º—É–ª–∏—Ä—É–µ–º SQL —Ñ—É–Ω–∫—Ü–∏–∏

export async function runSQL(query: string, params: any[] = []): Promise<{ id?: string; changes: number }> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.runSQL(query, params);
}

export async function getSQL(query: string, params: any[] = []): Promise<any> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.getSQL(query, params);
}

export async function allSQL(query: string, params: any[] = []): Promise<any[]> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.allSQL(query, params);
}

// –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

export async function getTasks(): Promise<any[]> {
  if (!jsonDb) return [];
  return await jsonDb.getTasks();
}

export async function getTaskById(id: string): Promise<any | undefined> {
  if (!jsonDb) return undefined;
  return await jsonDb.getTaskById(id);
}

export async function insertTask(taskData: any): Promise<string> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.insertTask(taskData);
}

export async function updateTask(id: string, updates: any): Promise<boolean> {
  if (!jsonDb) return false;
  return await jsonDb.updateTask(id, updates);
}

export async function getProducts(): Promise<any[]> {
  if (!jsonDb) return [];
  return await jsonDb.getProducts();
}

export async function insertProduct(productData: any): Promise<string> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.insertProduct(productData);
}

export async function getInventoryLog(): Promise<any[]> {
  if (!jsonDb) return [];
  return await jsonDb.getInventoryLog();
}

export async function insertInventoryLog(logData: any): Promise<string> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.insertInventoryLog(logData);
}

export async function getScheduledReports(): Promise<any[]> {
  if (!jsonDb) return [];
  return await jsonDb.getScheduledReports();
}

export async function insertScheduledReport(reportData: any): Promise<string> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.insertScheduledReport(reportData);
}

export async function updateScheduledReport(id: string, updates: any): Promise<boolean> {
  if (!jsonDb) return false;
  return await jsonDb.updateScheduledReport(id, updates);
}

export async function deleteScheduledReport(id: string): Promise<boolean> {
  if (!jsonDb) return false;
  return await jsonDb.deleteScheduledReport(id);
}

export async function getReportHistory(): Promise<any[]> {
  if (!jsonDb) return [];
  return await jsonDb.getReportHistory();
}

export async function insertReportHistory(historyData: any): Promise<string> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return await jsonDb.insertReportHistory(historyData);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export function getDatabaseStatistics(): any {
  if (!jsonDb) {
    return {
      totalTasks: 0,
      totalProducts: 0,
      totalInventoryLogs: 0,
      totalScheduledReports: 0,
      totalReportHistory: 0,
      status: '–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
    };
  }
  return jsonDb.getStatistics();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—ç–º—É–ª–∏—Ä—É–µ–º sqlite3.Database)
export function getDatabase(): any {
  return jsonDb;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
export async function closeDatabase(): Promise<void> {
  if (jsonDb) {
    console.log('‚úÖ JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
    jsonDb = null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
export function exportDatabaseData(): any {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return jsonDb.exportData();
}

export function importDatabaseData(data: any): void {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  jsonDb.importData(data);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
export async function clearAllData(): Promise<void> {
  if (!jsonDb) {
    throw new Error('JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  await jsonDb.clearAllData();
} 